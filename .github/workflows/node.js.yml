# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Test & Publish

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: "Test"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - run: npm install
    - run: npm run test:unit
    - run: npm run test:acceptance
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: artifacts
    - run: echo TODO -- publish to package registry # see https://github.com/marketplace/actions/npm-publish

  publish-test-results:
    name: "Publish Test Results"
    needs: test
    runs-on: ubuntu-latest

    # the test job might be skipped, we don't need to run this job then
    if: success() || failure()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: test-results

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1.4
        with:
          check_name: Unit Test Results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: junit.unit.xml

      - name: Publish Acceptance Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1.4
        with:
          check_name: Acceptance Test Results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: junit.acceptance.xml

  other-report:
    runs-on: ubuntu-18.04
    needs: test
    name: Generate Test Reports (alternate)
    steps:
      - name: Download Artifacts
        id: download
        uses: actions/download-artifact@v2
        with:
          name: test-results
          path: artifacts
      - name: Generate Report
        id: xunit-viewer
        uses: AutoModality/action-xunit-viewer@v1
        with:
          results: ${{steps.download.outputs.download-path}}
      - name: The generated report
        run: echo "The report is ${{ steps.xunit-viewer.outputs.report-file }}"    
      - name: Attach the report
        uses: actions/upload-artifact@v1
        with:
          name: alternate-results-path-reports
          path: ${{steps.download.outputs.download-path}}
